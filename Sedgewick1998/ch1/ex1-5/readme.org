* Exercise 1.5

Do exercise 1.4 but use the quick-union algorithm (Program 1.2)

** Program 1.2

#+begin_src C
#include <stdio.h>
#define N 10000

int main(void)
{
    int i, j, p, q, id[N];
    for (i = 0; i < N; i++) id[i] = i; // Initiallize id array 
    while (scanf("%d %d\n", &p, &q) == 2) {
         for (i = p; i != id[i]; i = id[i]) // find the root of node p => i is the root of p 
              ;
         for (j = q; j != id[j]; j = id[j]) // find the root of node q => j is the root of q
              ;
         if (i == j) continue; // p and q are connected if their roots are same
         id[i] = j; // if not connected, root i gets merged to root j
         printf(" %d %d\n", p, q);
    }
}
#+end_src

** My answer

|     | id[0] | id[1] | id[2] | id[3] | id[4] | id[5] | id[6] | ... | number of accesses to ~id~ |
|-----+-------+-------+-------+-------+-------+-------+-------+-----+--------------------------|
|     |     0 |     1 |     2 |     3 |     4 |     5 |     6 | ... | 0                        |
| ~0-2~ |     2 |     1 |     2 |     3 |     4 |     5 |     6 | ... | 1 + 1 + 1 = 3            |
| ~1-4~ |     2 |     4 |     2 |     3 |     4 |     5 |     6 | ... | 1 + 1 + 1 = 3            |
| ~2-5~ |     2 |     4 |     5 |     3 |     4 |     5 |     6 | ... | 1 + 1 + 1 = 3            |
| ~3-6~ |     2 |     4 |     5 |     6 |     4 |     5 |     6 | ... | 1 + 1 + 1 = 3            |
| ~0-4~ |     2 |     4 |     5 |     6 |     4 |     4 |     6 | ... | 5 + 1 + 1 = 6            |
| ~6-0~ |     2 |     4 |     5 |     6 |     4 |     4 |     4 | ... | 1 + 7 + 1 = 9            |
| ~1-3~ |     2 |     4 |     5 |     6 |     4 |     4 |     4 | ... | 3 + 5 = 8                |
