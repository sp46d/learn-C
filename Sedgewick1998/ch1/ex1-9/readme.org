* Exercise 1.9

Prove an upper bound on the number of machine instructions required to process /M/ connections on /N/ objects using Program 1.3. You may assume, for example, that any C assignment statement always require less than /c/ instructions, for some fixed constant /c/.

** Program 1.3

#+begin_src C
#include <stdio.h>
#define N 1000

int main(void)
{
    int i, j, p, q, id[N], sz[N];
    for (i = 0; i < N; i++) {
        id[i] = i;
        sz[i] = 1; // initialize size array to 1 for all elements
    }
    while (scanf("%d %d\n", &p, &q) == 2) {
        // find the root of p and q; the roots are defined as a node that points to itself
        for (i = p; i != id[i]; i = id[i])
            ;
        for (j = q; j != id[j]; j = id[j])
            ;
        if (i == j)
            continue;
        if (sz[i] < sz[j]) {
            id[i] = j; // connect the smaller tree to the larger; now the root i
                       // is no longer a root but points to the root of the
                       // larger tree
            sz[j] += sz[i];
        } else {
            id[j] = i;
            sz[i] += sz[j];
        }
        printf("> %d %d\n", p, q);
    }
}
#+end_src

** My answer

Suppose that any C assignment statement requires less than /c/ machine instructions, for some constant /c/. The weighted union-find algorithm needs to process at most $logN$ iterations to find the root of each node of the given pair, resulting in the upper bound of $2logN$ iterations for finding roots of the two nodes of the given pair. Each iteration contains one assignment, i.e. ~i = id[i]~, so it requires at most $2 \times c \times logN$ machine instructions just for finding roots. After finding roots, we need to merge the smaller tree into the larger one, by assigning the root of the smaller tree to that of the larger one, which is another assignment. After the two trees are merged, the ~size~ array needs to get updated, which is also another assignment. So, the total number of assignment statements is at most $2 \times logN + 2$, per connection, which requires less than $2 \times c \times logN + 2$ machine instructions. If we have /M/ connections to perform, the upper bound of machine instructions on those operations will be $2 \times M \times c \times logN + 2 \times M$.
